%p#notice #{notice}


%p
  %b Name:
  #{ @team.name }

= link_to 'Edit', edit_team_path(@team) 
| 
= link_to 'Back', teams_path 


%br
#{@assists}

/#{@blocks}
/#{@field_goal_percentage}
/#{@free_throw_percentage}
/#{@rebounds}
/#{@steals}
/#{@three_pointers_made}
/#{@total_points} 
/ #{@turnovers} 


%script{:src => "http://d3js.org/d3.v3.min.js"}


:css
  body {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    position: relative;
    width: 960px;
  }

  .axis text {
    font: 10px sans-serif;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .bar {
    fill: steelblue;
    fill-opacity: .9;
  }

  .x.axis path {
    display: none;
  }

  label {
    position: absolute;
    top: 10px;
    right: 10px;
  }

%label 
  %input{:type => "checkbox"} Sort values

:javascript
  var margin = {top: 20, right: 20, bottom: 30, left: 40},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  //var formatPercent = d3.format(".0%");

  var x = d3.scale.ordinal()
      .rangeRoundBands([0, width], .1, 1);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left")
      //.tickFormat(formatPercent);

  var svg = d3.select("body").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var data = JSON.parse('#{raw @assists}');

  data.forEach(function(d) {
    d.frequency = +d.assists;
  });

  //alert(d); 

  x.domain(data.map(function(d) { return d.week_number; }));
  y.domain([0, d3.max(data, function(d) 
    { 
      //alert(d.assists);
      return d.assists; 
    })]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Assists");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d.week_number); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.assists); })
      .attr("height", function(d) { return height - y(d.frequency); });

  d3.select("input").on("change", change);

  var sortTimeout = setTimeout(function() {
    d3.select("input").property("checked", true).each(change);
  }, 2000);

  function change() {
    clearTimeout(sortTimeout);

    // Copy-on-write since tweens are evaluated after a delay.
    var x0 = x.domain(data.sort(this.checked
        ? function(a, b) { return b.frequency - a.frequency; }
        : function(a, b) { return d3.ascending(a.week_number, b.assists); })
        .map(function(d) { return d.week_number; }))
        .copy();

    var transition = svg.transition().duration(750),
        delay = function(d, i) { return i * 50; };

    transition.selectAll(".bar")
        .delay(delay)
        .attr("x", function(d) { return x0(d.week_number); });

    transition.select(".x.axis")
        .call(xAxis)
      .selectAll("g")
        .delay(delay);
  }
